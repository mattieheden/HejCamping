using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using HejCamping.Models;
using HejCamping.ApplicationServices;
using Microsoft.AspNetCore.Authorization;

namespace HejCamping.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly IBookingService _bookingService;

        public HomeController(ILogger<HomeController> logger, IBookingService bookingService)
        {
            _logger = logger;
            _bookingService = bookingService;
        }

        /*public List<Cabin> GetCabins()
        {
            //replace mock response with database query? 
            return new List<Cabin>
            {
                new Cabin { Id = 1, Number = 1, IsVacant = true, PositionX = 100, PositionY = 230 },
                new Cabin { Id = 2, Number = 2, IsVacant = true, PositionX = 150, PositionY = 270 },
                new Cabin { Id = 3, Number = 3, IsVacant = true, PositionX = 200, PositionY = 290 },
                new Cabin { Id = 4, Number = 4, IsVacant = false, PositionX = 250, PositionY = 310 },
                new Cabin { Id = 5, Number = 5, IsVacant = true, PositionX = 300, PositionY = 320 },
            };
        }*/

        public IActionResult Booking()
        {
            var cabins = _bookingService.GetCabins();
            ViewBag.Cabins = cabins;
            var cabinAvailability = _bookingService.GetCabinAvailability(DateTime.Today, DateTime.Today.AddDays(1));
            foreach (var cabin in cabins)
            {
                cabin.IsVacant = cabinAvailability[cabin.Id];
            }
            ViewBag.CabinAvailability = cabinAvailability;

            return View();
        }

        [HttpGet]
        public IActionResult GetAvailableCabins(string fromDate, string toDate)
        {
            DateTime parsedFromDate;
            DateTime parsedToDate;

            if (!DateTime.TryParse(fromDate, out parsedFromDate) || !DateTime.TryParse(toDate, out parsedToDate))
            {
                return BadRequest("Invalid date format");
            }

            var cabinAvailability = _bookingService.GetCabinAvailability(parsedFromDate, parsedToDate);
            return Json(cabinAvailability);
        }

        [HttpPost]
        public IActionResult SubmitBooking(BookingModel model)
        {
            if (ModelState.IsValid)
            {
                model.PricePerNight = 179;
                model.NumberOfNights = (int)(model.ToDate - model.FromDate).TotalDays;
                model.TotalPrice = model.PricePerNight * model.NumberOfNights;
                model.OrderDate = DateTime.UtcNow;
                // Mock booking ID, real one should be generated by the database
                string timestampPart = DateTime.UtcNow.ToString("mmssfff"); 
                string randomLetters = new string(Enumerable.Repeat("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", 7)
                                                .Select(s => s[new Random().Next(s.Length)]).ToArray());
                model.OrderNumber = $"{randomLetters}{timestampPart}";

                // Send booking to database (Currently fake data)
                _bookingService.AddBooking(new BookingDTO
                {
                    OrderNumber = model.OrderNumber,
                    IsCancelled = false,
                    OrderDate = model.OrderDate,
                    Email = model.Email,
                    Name = model.Name,
                    DateStart = model.FromDate,
                    DateEnd = model.ToDate,
                    CabinNr = model.CabinId,
                    TotalPrice = model.TotalPrice,
                });

                // Cancel a booking
                //_bookingService.CancelBooking(model.OrderNumber.ToString());
                
                // Redirect to a confirmation view
                return View("BookedCabin", model);
            }
            else
            {
                // If the model state is invalid, return to the booking page with validation messages
                return View("Booking", model);
            }
        }

        //[HttpPost]
        public JsonResult DelayedRedirect()
        {
        // Your action logic here

        // Return a JSON response
        return Json(new { success = true, message = "Action triggered successfully!" });
        }
        

        // Index action
        public IActionResult Index()
        {
            return View();
        }

        // Privacy action
        public IActionResult Privacy()
        {
            return View();
        }

        // DatePicker action - GET
        [HttpGet]
        public IActionResult DatePicker()
        {
            return View();
        }

        // DatePicker action - POST
        [HttpPost]
        public IActionResult DatePicker(DatePickerModel model)
        {
            // Process the selected date
            return View(model);
        }
            
        [Authorize]
        public IActionResult AdminPortal()
        {
            return View();
        }

        // Error action
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
